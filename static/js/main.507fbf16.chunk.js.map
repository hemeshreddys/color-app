{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Maincontainer","styled","div","_templateObject","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","background","createTable","n","table","i","push","react_default","a","createElement","style","backgroundColor","getRandomColor","handleChangeComplete","color","setState","hex","handleChange","e","value","target","low","high","Math","floor","random","getRandomNumber","display","flexWrap","width","height","lib","onChangeComplete","type","onChange","alignItems","justifyContent","fontSize","borderRadius","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mGAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,kfCMxC,IAAMC,QAAgBC,EAAOC,IAAVC,KAkFJC,cA/Df,SAAAA,IAAa,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACXC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAJAI,MAAQ,CACNC,WAAY,QAEHR,EAObS,YAAc,SAACC,GAGb,IAFA,IAAIC,EAAQ,GAEHC,EAAI,EAAGA,EAAIF,EAAGE,IACrBD,EAAME,KAAKC,EAAAC,EAAAC,cAAA,WAERF,EAAAC,EAAAC,cAACrB,EAAD,CAAesB,MAAO,CAACC,gBAAgBlB,EAAKmB,mBAC3CnB,EAAKmB,oBAKX,OAAOR,GAnBIX,EAqCXoB,qBAAuB,SAACC,GACtBrB,EAAKsB,SAAS,CAAEd,WAAYa,EAAME,OAtCzBvB,EAwCXwB,aAAe,SAACC,GACdzB,EAAKsB,SAAS,CAACI,MAAOD,EAAEE,OAAOD,SAvCjC1B,EAAKO,MAAQ,CACXmB,MAAQ,IAHC1B,+EAsBI4B,EAAKC,GAEpB,OADQC,KAAKC,MAAMD,KAAKE,UAAYH,EAAOD,EAAM,IAAMA,2CAQvD,IAHA,IACIP,EAAQ,IAEHT,EAAI,EAAGA,EAAI,EAAGA,IACrBS,GAJe,mBAIKlB,KAAK8B,gBAAgB,EAAG,KAG9C,OAAOZ,mCAUL,OACEP,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,OAAKC,MAAO,CAACiB,QAAQ,OAAOC,SAAS,SACpChC,KAAKM,YAAY,MAElBK,EAAAC,EAAAC,cAAA,OAAKC,MAAO,CAACmB,MAAM,QAAQC,OAAO,OAAOnB,gBAAgBf,KAAKI,MAAMC,aAApE,oBAAoGL,KAAKI,MAAMC,YAC/GM,EAAAC,EAAAC,cAACsB,EAAA,aAAD,CACAjB,MAAQlB,KAAKI,MAAMC,WACnB+B,iBAAmBpC,KAAKiB,uBAExBN,EAAAC,EAAAC,cAAA,SAAOwB,KAAK,OAAOd,MAAOvB,KAAKI,MAAMmB,MAAOe,SAAUtC,KAAKqB,eACzDV,EAAAC,EAAAC,cAAA,OAAKC,MAAO,CAACiB,QAAQ,OAAOQ,WAAW,SAASC,eAAe,SAASC,SAAS,MAAMvB,MAAM,QAAQwB,aAAa,UAAW1C,KAAKI,MAAMmB,MAAxI,IAAgJvB,KAAKI,MAAMC,oBA5DjJsC,IAAMC,WCTJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOxC,EAAAC,EAAAC,cAACuC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.507fbf16.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { SketchPicker  } from 'react-color';\nimport styled from 'styled-components'\n\nconst Maincontainer = styled.div`\ncolor:white;\nfont-size: 0.5rem;\ntext-align:center;\nline-height:3.5rem;\nwidth:50px;\nheight:50px;\nborder:2px solid white;\n&:hover {\n  width:100px;\n  height:100px;\n  font-size: 1rem;\n  cursor:pointer;\n}\n`\nclass App extends React.Component {\n  state = {\n    background: '#fff',\n  };\nconstructor(){\n  super()\n  this.state = {\n    value : ''\n  }\n}\n\ncreateTable = (n) => {\n  let table = []\n\n  for (let i = 0; i < n; i++) {\n    table.push(<div>\n      {\n       <Maincontainer style={{backgroundColor:this.getRandomColor()}}>\n       {this.getRandomColor()}\n       </Maincontainer>\n      }\n      </div>)\n  }\n  return table\n}\n\n getRandomNumber(low, high) {\n  var r = Math.floor(Math.random() * (high - low + 1)) + low;\n  return r;\n}\n\n getRandomColor() {\n  var characters = \"0123456789ABCDEF\";\n  var color = '#';\n\n  for (var i = 0; i < 6; i++) {\n    color += characters[this.getRandomNumber(0, 15)];\n  }\n  \n  return color;\n}\n  handleChangeComplete = (color) => {\n    this.setState({ background: color.hex });\n  };\n  handleChange = (e) =>{ \n    this.setState({value: e.target.value});\n  }\n\n  render() {\n    return (\n      <div>\n      <div style={{display:'flex',flexWrap:'wrap'}}>\n      {this.createTable(500)}\n      </div>\n      <div style={{width:'100vw',height:'10vh',backgroundColor:this.state.background }}>Your selection : {this.state.background}</div>\n      <SketchPicker\n      color={ this.state.background }\n      onChangeComplete={ this.handleChangeComplete }\n      />\n      <input type=\"text\" value={this.state.value} onChange={this.handleChange}/>\n        <div style={{display:'flex',alignItems:'center',justifyContent:'center',fontSize:'5px',color:'white',borderRadius:'100px'}}>{this.state.value} {this.state.background}</div>\n      </div>\n\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}